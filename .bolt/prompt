üìö HypnoApp ‚Äî Default Knowledgebase for Bolt
0) TL;DR guardrails

Do not change: Home layout, Hypno Portal layout, WebGL Orb visuals, bottom tab bar styling and placement.

No page scrolling on any route (Home/Explore/Create/Favorites/Profile). If content can‚Äôt fit: open a modal or shrink-to-fit with responsive flex/grid. Only modal body may scroll.

Ego States are chosen in a modal (not on Profile). Profile only shows the current state card + ‚ÄúChange‚Äù.

Use TypeScript, React, Tailwind. Prefer small composable components. Keep things lightweight; no new libs unless asked.

1) Tech stack & structure

Stack: Vite + React + TypeScript + TailwindCSS.
State: Lightweight stores (zustand-style) in src/state.
Routing: Tabs handled by internal state (no deep nested routers).
Payments: Stripe (client only for UI; server endpoints assumed later).
Audio: WebAudio for playback; TTS/ASR adapters pluggable.

Canonical tree (condensed):

src/
  App.tsx                 // owns shell + tab state + BottomTabs (always mounted)
  styles/glass.css        // shared glass/tokens/utilities
  components/
    orb/WebGLOrb.tsx      // the globe ‚Äî do NOT restyle or move
    tabs/BottomTabs.tsx   // fixed bottom nav (always visible)
    home/HomePage.tsx     // DO NOT change layout ‚Äì only small fixes allowed
    hypno/UnifiedSession.tsx // breathing+guide+orb; no layout changes
    explore/ExploreView.tsx
    create/CreateView.tsx
    favorites/FavoritesView.tsx
    profile/ProfileView.tsx
    stories/StoriesRow.tsx // ego state chips row when used
    actions/ActionsBar.tsx
    cards/‚Ä¶                // small UI cards
    modals/
      EgoStateModal.tsx    // full-screen sheet: ego picker + analytics
      SettingsModal.tsx    // subscriptions, voice, display, data, etc.
  state/
    uiStore.ts             // ui flags: activeTab, modals open, sheet states
    userStore.ts           // current ego state, streaks, XP, analytics
    sessionStore.ts        // active session, step timers, audio flags
    catalogStore.ts        // protocols library (explore/create)
  services/
    payments/stripe.ts     // stripe helpers (createPortal, checkout link)
    audio/tts.ts           // pluggable TTS
    audio/asr.ts           // optional speech capture
    analytics/track.ts     // events + local stats
    storage/local.ts       // persist user+session safely
  constants/
    egoStates.ts           // 9 core + optional extended list with colors
    tokens.ts              // HP/MP, XP thresholds, streak rules
    breathing.ts           // box, hypoxia sequences (arrays of steps)
    colors.ts              // semantic palette

2) Global UX rules

No page scroll. Each route uses h-[100svh] grid or flex-col h-[100svh], with even distribution. If overflow ‚Üí modal (sheet).

BottomTabs are always mounted in App.tsx (outside views); views should allocate bottom padding (pb-[tabHeight]) only if needed.

Glass aesthetic: backdrop-blur-xl bg-white/4 border border-white/10 rounded-2xl shadow-[inset_‚Ä¶]. Use tokens, don‚Äôt hand-pick colors.

Accessibility: focus rings, keyboard nav, Esc closes modals, aria labels on icons.

3) Routes (each must fit to screen)
Home

Contains: StoriesRow (ego states row), WebGLOrb centered, ActionsBar (session shortcuts), small level/progress indicator (can be in actions bar).

Contract: Do not rearrange major sections. Only spacing tweaks to fit.

Explore

Card grid of protocol tiles. Must fit 100svh.

If filters or long lists overflow ‚Üí use a Filters modal or Pagination chips inside the grid area. No page scroll.

Create

Form segments (Induction, Deepener, Goals, Metaphors, Duration).

If cannot fit ‚Üí Stepper modal or collapsible sections, or ‚ÄúReview & Save‚Äù modal.

Favorites

Paginate or ‚Äúpage chips‚Äù. The visible grid area must fit 100svh. No scroll.

Profile

Stats row (Level, Streak, Sessions, Awards), Level Progress, Current Ego State card (‚ÄúChange‚Äù ‚Üí EgoStateModal).

Usage Analytics removed from Profile and shown inside EgoStateModal.

4) Modal system

Full-screen sheet with fixed Header + Footer, scrollable body only.

Close on Esc and overlay click.

uiStore API:

isEgoModalOpen, openEgoStateModal(), closeEgoStateModal()

isSettingsOpen, openSettings(), closeSettings()

While a modal is open ‚Üí add overflow-hidden to document.body.

5) Ego States (the 9 core + extended)

Core 9: Guardian, Rebel, Healer, Explorer, Mystic, Sage, Child, Performer, Shadow.
Optional extended: Builder, Seeker, Lover, Trickster, Warrior, Visionary.

constants/egoStates.ts shape:

type EgoStateId =
  | 'guardian'|'rebel'|'healer'|'explorer'|'mystic'|'sage'|'child'|'performer'|'shadow'
  | 'builder'|'seeker'|'lover'|'trickster'|'warrior'|'visionary';

interface EgoStateMeta {
  id: EgoStateId;
  name: string;
  role: string;         // "Protector", "Challenger"‚Ä¶
  color: string;        // CSS var or hex
  tags: string[];       // small benefits (‚ÄúBoundaries‚Äù, ‚ÄúCreativity‚Äù)
  icon: ReactNode;      // prebuilt icon
}
export const EGO_STATES: EgoStateMeta[] = [ ‚Ä¶ ];


Behavior:

Selecting a state tints the orb baseline + personalized recommendations.

Persist selection: userStore.setSelectedEgoState(id)

EgoStateModal contents:

Tile grid (2‚Äì3 columns responsive) of states; selected tile shows halo + check.

Below: Usage Analytics moved here (Most Used card + mini grid).

Footer: Cancel / Save & Apply.

6) Session system (Hypno Portal)

Phases: preparation ‚Üí induction ‚Üí deepening ‚Üí belief/outline ‚Üí integration.

Breathing presets: constants/breathing.ts

box( x s ), hypoxia (few rounds after box), relax(4-2-6-2) etc. Arrays of steps { phase: 'inhale'|'hold'|'exhale', durationSec: number }.

Scripts/outlines: not hard-coded word-for-word; the AI guide uses an outline (Elman/progressive/fractionation variants + metaphors).

sessionStore:

active?: {
  protocolId?: string;
  egoStateId: EgoStateId;
  phase: 'prep'|'induction'|'deep'|'belief'|'integrate';
  breathPtr: number;
  progressPct: number;
  startIso: string;
  hpDelta?: number; mpDelta?: number; xpEarned?: number;
}
startSession(opts), stopSession(), nextStep(), setPhase(), setBreathPtr()

7) Gamification (light)

HP/MP visual only (left/right micro bars).

XP & Levels: constants/tokens.ts:

XP per minute, caps, streak bonus.

Streak: daily sessions counter; break resets to 0.

Badges (optional): simple local list; unlock by sessions/time.

8) Catalog (Explore/Create)

Protocol:

type Protocol = {
  id: string;
  title: string;
  difficulty: 'beginner'|'intermediate'|'advanced';
  type: 'induction'|'deepener'|'complete';
  tags: string[];
  durationMin: number;
  egoAffinity?: EgoStateId[];
}


Create flow generates a new Protocol preset & saves to local store.

Favorites references protocol ids.

9) Audio (TTS/ASR) ‚Äî pluggable

services/audio/tts.ts ‚Üí speak(text, voiceId?), stop()

services/audio/asr.ts ‚Üí listen(onResult) (optional)

Session uses TTS to guide breathing/induction with no layout change.

10) Payments (Stripe)

UI stubs only; do not block UX if not configured.

services/payments/stripe.ts: openCustomerPortal(), startCheckout(planId)

SettingsModal shows ‚ÄúManage subscription‚Äù and ‚ÄúUpgrade‚Äù.

11) Styling & tokens

Use Tailwind + glass.css utilities:

glass-card = backdrop-blur-xl bg-white/4 border border-white/10 rounded-2xl

ring-state = ring-2 ring-[var(--state-color)]/60

Progress bars: track bg-white/10, fill bg-[var(--state-color)]/70

Spacing scale is tight (no dead space). Prefer gap-2/gap-3 on mobile.

12) What Bolt may change vs must not

May change (with reason):

Spacing inside Explore/Create/Favorites/Profile to achieve fit-to-screen

Convert long content into modals or pagination chips

Wire state/actions, analytics, and services

Implement Settings/Ego modals as specified

Must not change:

Home hero composition (StoriesRow ‚Üí Orb ‚Üí ActionsBar)

Hypno Portal composition around the orb

BottomTabs visuals & their fixed placement

WebGLOrb visuals/size contract (only theme tint is allowed)

13) Fit-to-screen recipe (use everywhere)

Top-level container per route: className="h-[100svh] flex flex-col"

Distribute with three zones when needed:

Header (shrink)

Main (flex-1) grid for core content

Footer (shrink)

If still too tall ‚Üí collapse secondary sections into a modal.

14) Analytics & persistence

Track events in services/analytics/track.ts: 'session_start'|'session_end'|'ego_change'|'favorite_add'.

Build Usage Analytics in userStore.analytics (counts & % per ego).

Persist selective state to localStorage via services/storage/local.ts.

15) Accessibility & Perf

Keyboard navigation, focus rings, aria labels.

Memoize heavy graphs/orb props.

Defer non-critical data until idle.

16) Default tasks Bolt can run

‚ÄúExtract Ego States to modal (full-screen) and remove Profile analytics‚Äù

‚ÄúMake Explore/Create/Favorites fit screen with grid shrink + modal overflow‚Äù

‚ÄúAdd SettingsModal with tabs: Account, Subscription (Stripe), Voice, Data, About‚Äù

‚ÄúHook orb tint to selected egoState‚Äù

‚ÄúAdd session outline editor (simple form) ‚Üí saved as local protocol‚Äù

17) Acceptance checklist

‚úÖ No route scrolls; bottom tabs always visible

‚úÖ Ego selection + analytics live inside EgoStateModal

‚úÖ Profile shows Current Ego State card only (Change ‚Üí modal)

‚úÖ Explore/Create/Favorites compress to 100svh or use modals/pagers

‚úÖ Hypno Portal unchanged visually; breathing + voice guide work

‚úÖ Orb theme retints on ego change

‚úÖ Settings modal exists; Stripe stubs wired (no crashes)