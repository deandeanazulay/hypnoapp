```typescript
// src/services/gemini.ts

/**
 * Represents a single segment of a generated script.
 */
export type ScriptSegment = {
  id: string;
  text: string;
  approxSec: number;
  markers?: { type: 'breath' | 'pause' | 'affirm'; t?: number }[];
};

/**
 * Represents the complete plan for a session script generated by Gemini.
 */
export type ScriptPlan = {
  segments: ScriptSegment[];
  outline: string;
  safetyNotes?: string[];
  version: string; // e.g., 'libero-v1'
  hash: string;    // sha256 of segments text
};

/**
 * Parameters for generating a session script.
 */
export interface GetSessionScriptParams {
  goalId: string;
  egoState: string;
  lengthSec: number;
  locale: string;
  level: number;
  streak: number;
  userPrefs: Record<string, any>; // Placeholder for user preferences
}

/**
 * Generates a session script plan using the Gemini API.
 *
 * @param params - The parameters for script generation.
 * @returns A promise that resolves to a ScriptPlan.
 */
export async function getSessionScript(params: GetSessionScriptParams): Promise<ScriptPlan> {
  // TODO: Implement Gemini API call here.
  // - Use AI.geminiModel from src/config/ai.ts
  // - Construct prompt using templates from src/prompts/
  // - Handle streaming where available, hard timeout, retries, rate-limiting, and circuit breaking.
  // - Return a mock ScriptPlan for now.
  console.log('Gemini: Generating session script with params:', params);
  return {
    segments: [
      { id: 'seg1', text: 'Welcome to your session. Take a deep breath and relax.', approxSec: 10 },
      { id: 'seg2', text: 'Feel yourself drifting deeper into a state of calm.', approxSec: 15, markers: [{ type: 'breath' }] },
    ],
    outline: 'Relaxation and focus session.',
    version: 'mock-v1',
    hash: 'mock-hash-123',
  };
}
```